[tool.poetry]
name = "schwerhoerige-hexe-benchmark"
version = "0.1.0"
description = "Benchmark for LLM phonetic pun understanding."
authors = ["Felix Fuhs <felix.fuhs@gmail.com>"] # Placeholder updated
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
httpx = "^0.27.0"
pydantic = "^2.7.0"
pydantic-settings = "^2.2.0"
anyio = "^4.3.0"
# kaleido = "^0.2.1" # For saving plotly figures as static images - consider if truly needed for CI/basic runs
pandas = "^2.2.2"
plotly = "^5.20.0"
pyarrow = "^16.1.0" # For Parquet file format support with pandas
rapidfuzz = "^3.9.0"
streamlit = "^1.35.0"
# structlog = "^24.1.0" # Logging is handled by standard logging + RichHandler in CLI for now
typer = {extras = ["all"], version = "^0.12.3"}
rich = "^13.7.0" # For rich console output

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-httpx = "^0.29.0" # For mocking HTTPX requests
ruff = "^0.4.0"
mypy = "^1.9.0"
# pytest-cov = "^5.0.0" # For coverage, if needed

[tool.poetry.scripts]
hexe-bench = "src.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 119 # Adjusted to a more common modern length
select = [
    "E",  # pycodestyle errors
    "F",  # Pyflakes
    "W",  # pycodestyle warnings
    "I",  # isort
    "UP", # pyupgrade
    "PTH",# flake8-use-pathlib
    "C90", # mccabe complexity
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "RUF",# Ruff-specific rules
]
ignore = [
    "E501", # Line too long, handled by formatter if formatter runs first
    # "PLW2901", # Example from user, but Pylint codes for Ruff are PLC, PLE, PLR, PLW
]
extend-exclude = [
    "tests/analytics/test_dashboard.py", # May have UI-specific structures
    "tests/analytics/test_visualize.py", # May have UI-specific structures
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
strict = true
packages = ["src"]

# More pragmatic settings for `disallow_any` to start with
disallow_any_unimported = false # Often noisy for external libs
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false # Can be very strict
disallow_subclassing_any = true

[[tool.mypy.overrides]]
module = "streamlit.*" # Streamlit can be hard to type strictly
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "plotly.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kaleido.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest_httpx.*"
ignore_missing_imports = true


[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
testpaths = ["tests"]
# addopts = "--cov=src --cov-report=term-missing --cov-report=xml" # If using pytest-cov

# [tool.coverage.run] # if using pytest-cov, this might be handled via pytest-cov's pytest options
# source = ["src"]

# [tool.coverage.report] # if using pytest-cov
# fail_under = 70
# show_missing = true
# omit = [
#     "src/analytics/*", # UI code can be harder to unit test fully
#     "src/cli.py",      # CLI interaction testing can be complex
#     "**/__main__.py",  # Often contains example code not meant for coverage
# ]